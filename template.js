"use strict";

var template = function template() {
	return "\n\t\tfunction {{{ name }}}( {{{ parameter }}} ){\n\t\t\ttry{\n\t\t\t\tlet parameter = Array.from( arguments );\n\n\t\t\t\tvar template = \"( function evaluate( ){ var result = undefined; @body return result; } ).bind( @bind )( )\"\n\t\t\t\t\t.replace( \"@bind\", \"( typeof global != 'undefined' )? global : ( typeof window != 'undefined' )? window : this\" )\n\t\t\t\t\t.replace( \"@body\", \"try{ result = ( @expression ); }catch( error ){ @error }\" )\n\t\t\t\t\t.replace( \"@error\", \"throw new Error( 'error executing expression, ' + error.stack );\" );\n\n\t\t\t\tif( this instanceof {{{ name }}} && parameter.length ){\n\t\t\t\t\tif( typeof this.initialize == \"function\" ){\n\t\t\t\t\t\tthis.initialize.apply( this, parameter );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}else if( this instanceof {{{ name }}} && !parameter.length ){\n\t\t\t\t\tif( typeof this.initialize == \"function\" ){\n\t\t\t\t\t\tthis.initialize( );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}else if( !( this instanceof {{{ name }}} ) && parameter.length ){\n\t\t\t\t\tvar variable = \"{{{ parameter }}}\".split( \",\" );\n\t\t\t\t\tvar initialize = {{{ name }}}.prototype.initialize;\n\t\t\t\t\tif( typeof initialize == \"function\" ){\n\t\t\t\t\t\tlet pattern = /^function\\s+[a-zA-Z0-9\\_\\$]+\\s*\\(\\s*([a-zA-Z0-9\\_\\$\\s\\,]+?)\\s*\\)/;\n\n\t\t\t\t\t\tvar argument = ( ( initialize.toString( )\n\t\t\t\t\t\t\t.match( pattern ) || [ ] )[ 1 ] || \"\" )\n\t\t\t\t\t\t\t.split( /\\,\\s*/ )\n\t\t\t\t\t\t\t.map( ( variable ) => { return variable.trim( ); } )\n\t\t\t\t\t\t\t.filter( ( variable ) => { return !!variable; } );\n\n\t\t\t\t\t\tif( argument.length > 0 ){\n\t\t\t\t\t\t\tvariable = argument;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar expression = \"function delegate( @parameter ){ return new this( @parameter ); }\"\n\t\t\t\t\t\t.replace( /@parameter/g,\n\t\t\t\t\t\t\tparameter.map( function onEachParameter( item, index ){\n\t\t\t\t\t\t\t\treturn variable[ index ] || \"abcdefghijklmnopqrstuvwxyz\"[ index ];\n\t\t\t\t\t\t\t} ).join( \",\" ) );\n\n\t\t\t\t\texpression = template.replace( \"@expression\", expression );\n\n\t\t\t\t\treturn eval( expression ).apply( {{{ name }}}, parameter );\n\n\t\t\t\t}else{\n\t\t\t\t\tvar expression = \"function delegate( ){ return new this( ); }\";\n\n\t\t\t\t\texpression = template.replace( \"@expression\", expression );\n\n\t\t\t\t\treturn eval( expression ).call( {{{ name }}} );\n\t\t\t\t}\n\n\t\t\t}catch( error ){\n\t\t\t\tthrow new Error( \"error creating instance of {{{ name }}}, \" + error.stack );\n\t\t\t}\n\t\t};\n\t";































































};

module.exports = template;

//# sourceMappingURL=template.js.map